{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.4.451.19169",
      "templateHash": "13342340735903365600"
    }
  },
  "parameters": {
    "projectPrefix": {
      "type": "string",
      "metadata": {
        "description": "Prefix for a project resources."
      },
      "maxLength": 7,
      "minLength": 3
    },
    "securityOwnerAADLogin": {
      "type": "string",
      "metadata": {
        "description": "Specifies the login ID (Login Name) of a user in the Azure Active Directory tenant."
      },
      "minLength": 1
    },
    "securityOwnerAADId": {
      "type": "string",
      "metadata": {
        "description": "Specifies the login ID (Object ID) of a user in the Azure Active Directory tenant."
      },
      "minLength": 1
    },
    "securityAlertEmail": {
      "type": "string",
      "metadata": {
        "description": "Specifies the email address where security findings will be sent for further analysis."
      },
      "minLength": 5
    },
    "sqlServerLogin": {
      "type": "string",
      "metadata": {
        "description": "Specifies the Administrator login for SQL Server."
      },
      "minLength": 6
    },
    "sqlServerPassword": {
      "type": "secureString",
      "metadata": {
        "description": "Specifies the Administrator password for SQL Server."
      },
      "minLength": 12
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Target region/location for deployment of resources."
      }
    },
    "resourceTags": {
      "type": "object",
      "defaultValue": "[if(contains(resourceGroup(), 'tags'), resourceGroup().tags, createObject())]",
      "metadata": {
        "description": "Tags to be associated with deployed resources."
      }
    },
    "vNetPrefix": {
      "type": "string",
      "defaultValue": "10.0.0.0/16",
      "metadata": {
        "description": "Address space of the Virtual Network."
      }
    },
    "subnetControlPlanePrefix": {
      "type": "string",
      "defaultValue": "10.0.0.0/20",
      "metadata": {
        "description": "Address space of the Control Plane subnet."
      }
    },
    "subnetDataPlanePrefix": {
      "type": "string",
      "defaultValue": "10.0.16.0/20",
      "metadata": {
        "description": "Address space of the Data Plane subnet."
      }
    },
    "subnetPrivateLinkPrefix": {
      "type": "string",
      "defaultValue": "10.0.32.0/23",
      "metadata": {
        "description": "Address space of the Private Link subnet."
      }
    },
    "logRetentionInDays": {
      "type": "int",
      "defaultValue": 120,
      "metadata": {
        "description": "Number of days for which to retain logs."
      }
    },
    "securityEmailAdmins": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Specifies if the security alert is sent to the account administrators."
      }
    },
    "sqlServerDBSkuName": {
      "type": "string",
      "defaultValue": "S0",
      "metadata": {
        "description": "Specifies the SKU for Azure SQL Database. Typically a letter + Number code. S0 - S12, P1 - P15."
      }
    },
    "sqlServerDBTierName": {
      "type": "string",
      "defaultValue": "Standard",
      "metadata": {
        "description": "Specifies the tier or edition for Azure SQL Database. Basic, Standard, Premium."
      }
    },
    "virtualApplianceIPAddress": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Specifies the IP Address of Virtual Network Appliance (Firewall) into which traffic from the Virtual Network will be routed to."
      }
    }
  },
  "functions": [],
  "variables": {
    "lowerProjectPrefix": "[toLower(parameters('projectPrefix'))]",
    "plBlobDnsZone": "privatelink.blob.core.windows.net",
    "plDfsDnsZone": "privatelink.dfs.core.windows.net",
    "plKvDnsZone": "privatelink.vaultcore.azure.net",
    "plSqlDnsZone": "privatelink.database.windows.net",
    "laUniqueName": "[format('{0}-adaw-la', variables('lowerProjectPrefix'))]",
    "vNetName": "[format('{0}-adaw-vnet', variables('lowerProjectPrefix'))]",
    "vNetNsgFlowLogRetentionInDays": 31,
    "useDdosProtectionPlan": false,
    "saDiagUniqueName": "[format('{0}adawdiagsa', variables('lowerProjectPrefix'))]",
    "saLakeUniqueName": "[format('{0}adawlakesa', variables('lowerProjectPrefix'))]",
    "kvUniqueName": "[format('{0}-adaw-kv', variables('lowerProjectPrefix'))]",
    "kvKeyPermissionsAll": [
      "backup",
      "create",
      "decrypt",
      "delete",
      "encrypt",
      "get",
      "import",
      "list",
      "purge",
      "recover",
      "restore",
      "sign",
      "unwrapKey",
      "update",
      "verify",
      "wrapKey"
    ],
    "kvSecretsPermissionsAll": [
      "backup",
      "delete",
      "get",
      "list",
      "purge",
      "recover",
      "restore",
      "set"
    ],
    "kvCertificatesPermissionsAll": [
      "backup",
      "create",
      "delete",
      "deleteissuers",
      "get",
      "getissuers",
      "import",
      "list",
      "listissuers",
      "managecontacts",
      "manageissuers",
      "purge",
      "recover",
      "restore",
      "setissuers",
      "update"
    ],
    "kvStoragePermissionsAll": [
      "backup",
      "delete",
      "deletesas",
      "get",
      "getsas",
      "list",
      "listsas",
      "purge",
      "recover",
      "regeneratekey",
      "restore",
      "set",
      "setsas",
      "update"
    ],
    "adfUniqueName": "[format('{0}-adaw-adf', variables('lowerProjectPrefix'))]",
    "sqlServerUniqueName": "[format('{0}-adaw-sql', variables('lowerProjectPrefix'))]",
    "sqlServerDBUniqueName": "[format('{0}-adaw-sql-db', variables('lowerProjectPrefix'))]",
    "sqlServerDBWeeklyRetention": "P1W",
    "sqlServerDBMonthlyRetention": "P1M",
    "sqlServerDBYearlyRetention": "P5Y",
    "sqlServerDBWeekOfYear": 1,
    "adbUniqueName": "[format('{0}-adaw-adb', variables('lowerProjectPrefix'))]",
    "routeTableDef": {
      "id": "[resourceId('Microsoft.Network/routeTables', format('{0}-adaw-route-table', variables('lowerProjectPrefix')))]"
    }
  },
  "resources": [
    {
      "type": "Microsoft.Network/privateDnsZones",
      "apiVersion": "2020-06-01",
      "name": "[variables('plBlobDnsZone')]",
      "location": "global",
      "tags": "[parameters('resourceTags')]",
      "properties": {}
    },
    {
      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
      "apiVersion": "2020-06-01",
      "name": "[format('{0}/{1}', variables('plBlobDnsZone'), variables('plBlobDnsZone'))]",
      "location": "global",
      "tags": "[parameters('resourceTags')]",
      "properties": {
        "virtualNetwork": {
          "id": "[resourceId('Microsoft.Network/virtualNetworks', variables('vNetName'))]"
        },
        "registrationEnabled": false
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', variables('vNetName'))]"
      ]
    },
    {
      "type": "Microsoft.Network/privateDnsZones",
      "apiVersion": "2020-06-01",
      "name": "[variables('plDfsDnsZone')]",
      "location": "global",
      "tags": "[parameters('resourceTags')]",
      "properties": {}
    },
    {
      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
      "apiVersion": "2020-06-01",
      "name": "[format('{0}/{1}', variables('plDfsDnsZone'), variables('plDfsDnsZone'))]",
      "location": "global",
      "tags": "[parameters('resourceTags')]",
      "properties": {
        "virtualNetwork": {
          "id": "[resourceId('Microsoft.Network/virtualNetworks', variables('vNetName'))]"
        },
        "registrationEnabled": false
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/privateDnsZones', variables('plDfsDnsZone'))]",
        "[resourceId('Microsoft.Network/virtualNetworks', variables('vNetName'))]"
      ]
    },
    {
      "type": "Microsoft.Network/privateDnsZones",
      "apiVersion": "2020-06-01",
      "name": "[variables('plKvDnsZone')]",
      "location": "global",
      "tags": "[parameters('resourceTags')]",
      "properties": {}
    },
    {
      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
      "apiVersion": "2020-06-01",
      "name": "[format('{0}/{1}', variables('plKvDnsZone'), variables('plKvDnsZone'))]",
      "location": "global",
      "tags": "[parameters('resourceTags')]",
      "properties": {
        "virtualNetwork": {
          "id": "[resourceId('Microsoft.Network/virtualNetworks', variables('vNetName'))]"
        },
        "registrationEnabled": false
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/privateDnsZones', variables('plKvDnsZone'))]",
        "[resourceId('Microsoft.Network/virtualNetworks', variables('vNetName'))]"
      ]
    },
    {
      "type": "Microsoft.Network/privateDnsZones",
      "apiVersion": "2020-06-01",
      "name": "[variables('plSqlDnsZone')]",
      "location": "global",
      "tags": "[parameters('resourceTags')]",
      "properties": {}
    },
    {
      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
      "apiVersion": "2020-06-01",
      "name": "[format('{0}/{1}', variables('plSqlDnsZone'), variables('plSqlDnsZone'))]",
      "location": "global",
      "tags": "[parameters('resourceTags')]",
      "properties": {
        "virtualNetwork": {
          "id": "[resourceId('Microsoft.Network/virtualNetworks', variables('vNetName'))]"
        },
        "registrationEnabled": false
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/privateDnsZones', variables('plSqlDnsZone'))]",
        "[resourceId('Microsoft.Network/virtualNetworks', variables('vNetName'))]"
      ]
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2020-10-01",
      "name": "[variables('laUniqueName')]",
      "tags": "[parameters('resourceTags')]",
      "location": "[parameters('location')]",
      "properties": {
        "sku": {
          "name": "PerGB2018"
        },
        "retentionInDays": "[parameters('logRetentionInDays')]",
        "publicNetworkAccessForIngestion": "Disabled",
        "publicNetworkAccessForQuery": "Disabled"
      }
    },
    {
      "type": "Microsoft.Insights/diagnosticSettings",
      "apiVersion": "2017-05-01-preview",
      "scope": "[format('Microsoft.OperationalInsights/workspaces/{0}', variables('laUniqueName'))]",
      "name": "DiagnosticSettings",
      "properties": {
        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('laUniqueName'))]",
        "logs": [
          {
            "category": "Audit",
            "enabled": true,
            "retentionPolicy": {
              "enabled": true,
              "days": "[parameters('logRetentionInDays')]"
            }
          }
        ],
        "metrics": [
          {
            "category": "AllMetrics",
            "enabled": true,
            "retentionPolicy": {
              "enabled": true,
              "days": "[parameters('logRetentionInDays')]"
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('laUniqueName'))]"
      ]
    },
    {
      "condition": "[variables('useDdosProtectionPlan')]",
      "type": "Microsoft.Network/ddosProtectionPlans",
      "apiVersion": "2020-08-01",
      "name": "[format('{0}-adaw-ddos-plan', variables('lowerProjectPrefix'))]",
      "location": "[parameters('location')]",
      "tags": "[parameters('resourceTags')]",
      "properties": {}
    },
    {
      "condition": "[not(empty(parameters('virtualApplianceIPAddress')))]",
      "type": "Microsoft.Network/routeTables",
      "apiVersion": "2020-08-01",
      "name": "[format('{0}-adaw-route-table', variables('lowerProjectPrefix'))]",
      "location": "[parameters('location')]",
      "tags": "[parameters('resourceTags')]",
      "properties": {
        "routes": [
          {
            "name": "route-to-virtual-appliance",
            "properties": {
              "addressPrefix": "0.0.0.0/0",
              "nextHopType": "VirtualAppliance",
              "nextHopIpAddress": "[parameters('virtualApplianceIPAddress')]"
            }
          }
        ],
        "disableBgpRoutePropagation": false
      }
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2020-08-01",
      "name": "[format('{0}-adaw-nsg-control-plane', variables('lowerProjectPrefix'))]",
      "location": "[parameters('location')]",
      "tags": "[parameters('resourceTags')]",
      "properties": {
        "securityRules": [
          {
            "name": "Deny-All-In",
            "properties": {
              "priority": 1000,
              "protocol": "*",
              "direction": "Inbound",
              "access": "Deny",
              "description": "Deny-All-In",
              "sourceAddressPrefix": "*",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "*",
              "destinationPortRange": "*"
            }
          },
          {
            "name": "Deny-All-Out",
            "properties": {
              "priority": 1000,
              "protocol": "*",
              "direction": "Outbound",
              "access": "Deny",
              "description": "Deny-All-Out",
              "sourceAddressPrefix": "*",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "*",
              "destinationPortRange": "*"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Insights/diagnosticSettings",
      "apiVersion": "2017-05-01-preview",
      "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', format('{0}-adaw-nsg-control-plane', variables('lowerProjectPrefix')))]",
      "name": "DiagnosticSettings",
      "properties": {
        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('laUniqueName'))]",
        "logs": [
          {
            "category": "NetworkSecurityGroupEvent",
            "enabled": true,
            "retentionPolicy": {
              "enabled": true,
              "days": "[parameters('logRetentionInDays')]"
            }
          },
          {
            "category": "NetworkSecurityGroupRuleCounter",
            "enabled": true,
            "retentionPolicy": {
              "enabled": true,
              "days": "[parameters('logRetentionInDays')]"
            }
          }
        ],
        "metrics": []
      },
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('laUniqueName'))]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-adaw-nsg-control-plane', variables('lowerProjectPrefix')))]"
      ]
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2020-08-01",
      "name": "[format('{0}-adaw-nsg-data-plane', variables('lowerProjectPrefix'))]",
      "location": "[parameters('location')]",
      "tags": "[parameters('resourceTags')]",
      "properties": {
        "securityRules": [
          {
            "name": "Deny-All-In",
            "properties": {
              "priority": 1000,
              "protocol": "*",
              "direction": "Inbound",
              "access": "Deny",
              "description": "Deny-All-In",
              "sourceAddressPrefix": "*",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "*",
              "destinationPortRange": "*"
            }
          },
          {
            "name": "Allow-Data-Plane-443-Outbound",
            "properties": {
              "priority": 500,
              "protocol": "Tcp",
              "direction": "Outbound",
              "access": "Allow",
              "description": "Allow-Data-Plane-443-Outbound",
              "sourceAddressPrefix": "[parameters('subnetDataPlanePrefix')]",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "[parameters('subnetPrivateLinkPrefix')]",
              "destinationPortRange": "443"
            }
          },
          {
            "name": "Allow-Data-Plane-1433-Outbound",
            "properties": {
              "priority": 600,
              "protocol": "Tcp",
              "direction": "Outbound",
              "access": "Allow",
              "description": "Allow-Data-Plane-1433-Outbound",
              "sourceAddressPrefix": "[parameters('subnetDataPlanePrefix')]",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "[parameters('subnetPrivateLinkPrefix')]",
              "destinationPortRange": "1433"
            }
          },
          {
            "name": "Deny-All-Out",
            "properties": {
              "priority": 1000,
              "protocol": "*",
              "direction": "Outbound",
              "access": "Deny",
              "description": "Deny-All-Out",
              "sourceAddressPrefix": "*",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "*",
              "destinationPortRange": "*"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Insights/diagnosticSettings",
      "apiVersion": "2017-05-01-preview",
      "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', format('{0}-adaw-nsg-data-plane', variables('lowerProjectPrefix')))]",
      "name": "DiagnosticSettings",
      "properties": {
        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('laUniqueName'))]",
        "logs": [
          {
            "category": "NetworkSecurityGroupEvent",
            "enabled": true,
            "retentionPolicy": {
              "enabled": true,
              "days": "[parameters('logRetentionInDays')]"
            }
          },
          {
            "category": "NetworkSecurityGroupRuleCounter",
            "enabled": true,
            "retentionPolicy": {
              "enabled": true,
              "days": "[parameters('logRetentionInDays')]"
            }
          }
        ],
        "metrics": []
      },
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('laUniqueName'))]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-adaw-nsg-data-plane', variables('lowerProjectPrefix')))]"
      ]
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2020-08-01",
      "name": "[format('{0}-adaw-nsg-private-link', variables('lowerProjectPrefix'))]",
      "location": "[parameters('location')]",
      "tags": "[parameters('resourceTags')]",
      "properties": {
        "securityRules": [
          {
            "name": "Allow-Data-Plane-443-Inbound",
            "properties": {
              "priority": 500,
              "protocol": "Tcp",
              "direction": "Inbound",
              "access": "Allow",
              "description": "Allow-Data-Plane-443-Inbound",
              "sourceAddressPrefix": "[parameters('subnetDataPlanePrefix')]",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "[parameters('subnetPrivateLinkPrefix')]",
              "destinationPortRange": "443"
            }
          },
          {
            "name": "Allow-Data-Plane-1433-Inbound",
            "properties": {
              "priority": 600,
              "protocol": "Tcp",
              "direction": "Inbound",
              "access": "Allow",
              "description": "Allow-Data-Plane-1433-Inbound",
              "sourceAddressPrefix": "[parameters('subnetDataPlanePrefix')]",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "[parameters('subnetPrivateLinkPrefix')]",
              "destinationPortRange": "1433"
            }
          },
          {
            "name": "Deny-All-In",
            "properties": {
              "priority": 1000,
              "protocol": "*",
              "direction": "Inbound",
              "access": "Deny",
              "description": "Deny-All-In",
              "sourceAddressPrefix": "*",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "*",
              "destinationPortRange": "*"
            }
          },
          {
            "name": "Deny-All-Out",
            "properties": {
              "priority": 1000,
              "protocol": "*",
              "direction": "Outbound",
              "access": "Deny",
              "description": "Deny-All-Out",
              "sourceAddressPrefix": "*",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "*",
              "destinationPortRange": "*"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Insights/diagnosticSettings",
      "apiVersion": "2017-05-01-preview",
      "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', format('{0}-adaw-nsg-private-link', variables('lowerProjectPrefix')))]",
      "name": "DiagnosticSettings",
      "properties": {
        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('laUniqueName'))]",
        "logs": [
          {
            "category": "NetworkSecurityGroupEvent",
            "enabled": true,
            "retentionPolicy": {
              "enabled": true,
              "days": "[parameters('logRetentionInDays')]"
            }
          },
          {
            "category": "NetworkSecurityGroupRuleCounter",
            "enabled": true,
            "retentionPolicy": {
              "enabled": true,
              "days": "[parameters('logRetentionInDays')]"
            }
          }
        ],
        "metrics": []
      },
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('laUniqueName'))]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-adaw-nsg-private-link', variables('lowerProjectPrefix')))]"
      ]
    },
    {
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2020-07-01",
      "name": "[variables('vNetName')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('resourceTags')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[parameters('vNetPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "control-plane",
            "properties": {
              "addressPrefix": "[parameters('subnetControlPlanePrefix')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-adaw-nsg-control-plane', variables('lowerProjectPrefix')))]"
              },
              "routeTable": "[if(empty(parameters('virtualApplianceIPAddress')), json('null'), variables('routeTableDef'))]",
              "delegations": [
                {
                  "name": "deleg-control-plane",
                  "properties": {
                    "serviceName": "Microsoft.Databricks/workspaces"
                  }
                }
              ]
            }
          },
          {
            "name": "data-plane",
            "properties": {
              "addressPrefix": "[parameters('subnetDataPlanePrefix')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-adaw-nsg-data-plane', variables('lowerProjectPrefix')))]"
              },
              "routeTable": "[if(empty(parameters('virtualApplianceIPAddress')), json('null'), variables('routeTableDef'))]",
              "delegations": [
                {
                  "name": "deleg-data-plane",
                  "properties": {
                    "serviceName": "Microsoft.Databricks/workspaces"
                  }
                }
              ]
            }
          },
          {
            "name": "private-link",
            "properties": {
              "addressPrefix": "[parameters('subnetPrivateLinkPrefix')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-adaw-nsg-private-link', variables('lowerProjectPrefix')))]"
              },
              "privateEndpointNetworkPolicies": "Disabled"
            }
          }
        ],
        "enableVmProtection": true,
        "enableDdosProtection": "[variables('useDdosProtectionPlan')]",
        "ddosProtectionPlan": "[if(variables('useDdosProtectionPlan'), json(format('{{\"id\":\"{0}\"}}', resourceId('Microsoft.Network/ddosProtectionPlans', format('{0}-adaw-ddos-plan', variables('lowerProjectPrefix'))))), json('null'))]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/ddosProtectionPlans', format('{0}-adaw-ddos-plan', variables('lowerProjectPrefix')))]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-adaw-nsg-control-plane', variables('lowerProjectPrefix')))]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-adaw-nsg-data-plane', variables('lowerProjectPrefix')))]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-adaw-nsg-private-link', variables('lowerProjectPrefix')))]",
        "[resourceId('Microsoft.Network/privateDnsZones', variables('plBlobDnsZone'))]",
        "[resourceId('Microsoft.Network/privateDnsZones', variables('plDfsDnsZone'))]",
        "[resourceId('Microsoft.Network/privateDnsZones', variables('plKvDnsZone'))]",
        "[resourceId('Microsoft.Network/privateDnsZones', variables('plSqlDnsZone'))]",
        "[resourceId('Microsoft.Network/routeTables', format('{0}-adaw-route-table', variables('lowerProjectPrefix')))]"
      ]
    },
    {
      "type": "Microsoft.Insights/diagnosticSettings",
      "apiVersion": "2017-05-01-preview",
      "scope": "[format('Microsoft.Network/virtualNetworks/{0}', variables('vNetName'))]",
      "name": "DiagnosticSettings",
      "properties": {
        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('laUniqueName'))]",
        "logs": [
          {
            "category": "VMProtectionAlerts",
            "enabled": true,
            "retentionPolicy": {
              "enabled": true,
              "days": "[parameters('logRetentionInDays')]"
            }
          }
        ],
        "metrics": [
          {
            "category": "AllMetrics",
            "enabled": true,
            "retentionPolicy": {
              "enabled": true,
              "days": "[parameters('logRetentionInDays')]"
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('laUniqueName'))]",
        "[resourceId('Microsoft.Network/virtualNetworks', variables('vNetName'))]"
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2021-01-01",
      "name": "[variables('saDiagUniqueName')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('resourceTags')]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "StorageV2",
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "accessTier": "Hot",
        "supportsHttpsTrafficOnly": true,
        "isHnsEnabled": false,
        "allowBlobPublicAccess": false,
        "minimumTlsVersion": "TLS1_2",
        "networkAcls": {
          "defaultAction": "Deny",
          "bypass": "AzureServices"
        }
      }
    },
    {
      "type": "Microsoft.Security/advancedThreatProtectionSettings",
      "apiVersion": "2019-01-01",
      "scope": "[format('Microsoft.Storage/storageAccounts/{0}', variables('saDiagUniqueName'))]",
      "name": "current",
      "properties": {
        "isEnabled": true
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('saDiagUniqueName'))]"
      ]
    },
    {
      "type": "Microsoft.Network/privateEndpoints",
      "apiVersion": "2020-08-01",
      "name": "[format('{0}-private-link', variables('saDiagUniqueName'))]",
      "location": "[parameters('location')]",
      "tags": "[parameters('resourceTags')]",
      "properties": {
        "subnet": {
          "id": "[reference(resourceId('Microsoft.Network/virtualNetworks', variables('vNetName'))).subnets[2].id]"
        },
        "privateLinkServiceConnections": [
          {
            "name": "[format('{0}-private-link', variables('saDiagUniqueName'))]",
            "properties": {
              "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', variables('saDiagUniqueName'))]",
              "groupIds": [
                "blob"
              ]
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('saDiagUniqueName'))]",
        "[resourceId('Microsoft.Network/virtualNetworks', variables('vNetName'))]"
      ]
    },
    {
      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
      "apiVersion": "2020-08-01",
      "name": "[format('{0}/private-link', format('{0}-private-link', variables('saDiagUniqueName')))]",
      "properties": {
        "privateDnsZoneConfigs": [
          {
            "name": "[variables('saDiagUniqueName')]",
            "properties": {
              "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', variables('plBlobDnsZone'))]"
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/privateDnsZones', variables('plBlobDnsZone'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('saDiagUniqueName'))]",
        "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-private-link', variables('saDiagUniqueName')))]"
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2021-01-01",
      "name": "[variables('saLakeUniqueName')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('resourceTags')]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "StorageV2",
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "accessTier": "Hot",
        "supportsHttpsTrafficOnly": true,
        "isHnsEnabled": true,
        "allowBlobPublicAccess": false,
        "minimumTlsVersion": "TLS1_2",
        "networkAcls": {
          "defaultAction": "Deny",
          "bypass": "None"
        }
      }
    },
    {
      "type": "Microsoft.Security/advancedThreatProtectionSettings",
      "apiVersion": "2019-01-01",
      "scope": "[format('Microsoft.Storage/storageAccounts/{0}', variables('saLakeUniqueName'))]",
      "name": "current",
      "properties": {
        "isEnabled": true
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('saLakeUniqueName'))]"
      ]
    },
    {
      "type": "Microsoft.Network/privateEndpoints",
      "apiVersion": "2020-08-01",
      "name": "[format('{0}-private-link', variables('saLakeUniqueName'))]",
      "location": "[parameters('location')]",
      "tags": "[parameters('resourceTags')]",
      "properties": {
        "subnet": {
          "id": "[reference(resourceId('Microsoft.Network/virtualNetworks', variables('vNetName'))).subnets[2].id]"
        },
        "privateLinkServiceConnections": [
          {
            "name": "[format('{0}-private-link', variables('saLakeUniqueName'))]",
            "properties": {
              "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', variables('saLakeUniqueName'))]",
              "groupIds": [
                "dfs"
              ]
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('saLakeUniqueName'))]",
        "[resourceId('Microsoft.Network/virtualNetworks', variables('vNetName'))]"
      ]
    },
    {
      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
      "apiVersion": "2020-08-01",
      "name": "[format('{0}/private-link', format('{0}-private-link', variables('saLakeUniqueName')))]",
      "properties": {
        "privateDnsZoneConfigs": [
          {
            "name": "[variables('saLakeUniqueName')]",
            "properties": {
              "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', variables('plDfsDnsZone'))]"
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/privateDnsZones', variables('plDfsDnsZone'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('saLakeUniqueName'))]",
        "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-private-link', variables('saLakeUniqueName')))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2020-04-01-preview",
      "name": "[variables('kvUniqueName')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('resourceTags')]",
      "properties": {
        "tenantId": "[subscription().tenantId]",
        "sku": {
          "family": "A",
          "name": "standard"
        },
        "accessPolicies": [],
        "enabledForDeployment": false,
        "enabledForDiskEncryption": false,
        "enabledForTemplateDeployment": false,
        "enableSoftDelete": true,
        "softDeleteRetentionInDays": 90,
        "enableRbacAuthorization": false,
        "createMode": "default",
        "enablePurgeProtection": true,
        "networkAcls": {
          "bypass": "None",
          "defaultAction": "Deny"
        }
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/accessPolicies",
      "apiVersion": "2020-04-01-preview",
      "name": "[format('{0}/add', variables('kvUniqueName'))]",
      "properties": {
        "accessPolicies": [
          {
            "tenantId": "[subscription().tenantId]",
            "objectId": "[parameters('securityOwnerAADId')]",
            "permissions": {
              "keys": "[variables('kvKeyPermissionsAll')]",
              "secrets": "[variables('kvSecretsPermissionsAll')]",
              "certificates": "[variables('kvCertificatesPermissionsAll')]",
              "storage": "[variables('kvStoragePermissionsAll')]"
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('kvUniqueName'))]"
      ]
    },
    {
      "type": "Microsoft.Insights/diagnosticSettings",
      "apiVersion": "2017-05-01-preview",
      "scope": "[format('Microsoft.KeyVault/vaults/{0}', variables('kvUniqueName'))]",
      "name": "DiagnosticSettings",
      "properties": {
        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('laUniqueName'))]",
        "logs": [
          {
            "category": "AuditEvent",
            "enabled": true,
            "retentionPolicy": {
              "enabled": true,
              "days": "[parameters('logRetentionInDays')]"
            }
          }
        ],
        "metrics": [
          {
            "category": "AllMetrics",
            "enabled": true,
            "retentionPolicy": {
              "enabled": true,
              "days": "[parameters('logRetentionInDays')]"
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('kvUniqueName'))]",
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('laUniqueName'))]"
      ]
    },
    {
      "type": "Microsoft.Network/privateEndpoints",
      "apiVersion": "2020-08-01",
      "name": "[format('{0}-private-link', variables('kvUniqueName'))]",
      "location": "[parameters('location')]",
      "tags": "[parameters('resourceTags')]",
      "properties": {
        "subnet": {
          "id": "[reference(resourceId('Microsoft.Network/virtualNetworks', variables('vNetName'))).subnets[2].id]"
        },
        "privateLinkServiceConnections": [
          {
            "name": "[format('{0}-private-link', variables('kvUniqueName'))]",
            "properties": {
              "privateLinkServiceId": "[resourceId('Microsoft.KeyVault/vaults', variables('kvUniqueName'))]",
              "groupIds": [
                "vault"
              ]
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('kvUniqueName'))]",
        "[resourceId('Microsoft.Network/virtualNetworks', variables('vNetName'))]"
      ]
    },
    {
      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
      "apiVersion": "2020-08-01",
      "name": "[format('{0}/private-link', format('{0}-private-link', variables('kvUniqueName')))]",
      "properties": {
        "privateDnsZoneConfigs": [
          {
            "name": "[variables('kvUniqueName')]",
            "properties": {
              "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', variables('plKvDnsZone'))]"
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('kvUniqueName'))]",
        "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-private-link', variables('kvUniqueName')))]",
        "[resourceId('Microsoft.Network/privateDnsZones', variables('plKvDnsZone'))]"
      ]
    },
    {
      "type": "Microsoft.DataFactory/factories",
      "apiVersion": "2018-06-01",
      "name": "[variables('adfUniqueName')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('resourceTags')]",
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "globalParameters": {}
      }
    },
    {
      "type": "Microsoft.Insights/diagnosticSettings",
      "apiVersion": "2017-05-01-preview",
      "scope": "[format('Microsoft.DataFactory/factories/{0}', variables('adfUniqueName'))]",
      "name": "DiagnosticSettings",
      "properties": {
        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('laUniqueName'))]",
        "logs": [
          {
            "category": "ActivityRuns",
            "enabled": true,
            "retentionPolicy": {
              "enabled": true,
              "days": "[parameters('logRetentionInDays')]"
            }
          },
          {
            "category": "PipelineRuns",
            "enabled": true,
            "retentionPolicy": {
              "enabled": true,
              "days": "[parameters('logRetentionInDays')]"
            }
          },
          {
            "category": "TriggerRuns",
            "enabled": true,
            "retentionPolicy": {
              "enabled": true,
              "days": "[parameters('logRetentionInDays')]"
            }
          },
          {
            "category": "SSISPackageEventMessages",
            "enabled": true,
            "retentionPolicy": {
              "enabled": true,
              "days": "[parameters('logRetentionInDays')]"
            }
          },
          {
            "category": "SSISPackageExecutableStatistics",
            "enabled": true,
            "retentionPolicy": {
              "enabled": true,
              "days": "[parameters('logRetentionInDays')]"
            }
          },
          {
            "category": "SSISPackageEventMessageContext",
            "enabled": true,
            "retentionPolicy": {
              "enabled": true,
              "days": "[parameters('logRetentionInDays')]"
            }
          },
          {
            "category": "SSISPackageExecutionComponentPhases",
            "enabled": true,
            "retentionPolicy": {
              "enabled": true,
              "days": "[parameters('logRetentionInDays')]"
            }
          },
          {
            "category": "SSISPackageExecutionDataStatistics",
            "enabled": true,
            "retentionPolicy": {
              "enabled": true,
              "days": "[parameters('logRetentionInDays')]"
            }
          },
          {
            "category": "SSISIntegrationRuntimeLogs",
            "enabled": true,
            "retentionPolicy": {
              "enabled": true,
              "days": "[parameters('logRetentionInDays')]"
            }
          },
          {
            "category": "SandboxPipelineRuns",
            "enabled": true,
            "retentionPolicy": {
              "enabled": true,
              "days": "[parameters('logRetentionInDays')]"
            }
          },
          {
            "category": "SandboxActivityRuns",
            "enabled": true,
            "retentionPolicy": {
              "enabled": true,
              "days": "[parameters('logRetentionInDays')]"
            }
          }
        ],
        "metrics": [
          {
            "category": "AllMetrics",
            "enabled": true,
            "retentionPolicy": {
              "enabled": true,
              "days": "[parameters('logRetentionInDays')]"
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.DataFactory/factories', variables('adfUniqueName'))]",
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('laUniqueName'))]"
      ]
    },
    {
      "type": "Microsoft.Sql/servers",
      "apiVersion": "2020-08-01-preview",
      "name": "[variables('sqlServerUniqueName')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('resourceTags')]",
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "administratorLogin": "[parameters('sqlServerLogin')]",
        "administratorLoginPassword": "[parameters('sqlServerPassword')]",
        "version": "12.0",
        "minimalTlsVersion": "1.2",
        "publicNetworkAccess": "Disabled"
      }
    },
    {
      "type": "Microsoft.Network/privateEndpoints",
      "apiVersion": "2020-08-01",
      "name": "[format('{0}-private-link', variables('sqlServerUniqueName'))]",
      "location": "[parameters('location')]",
      "tags": "[parameters('resourceTags')]",
      "properties": {
        "subnet": {
          "id": "[reference(resourceId('Microsoft.Network/virtualNetworks', variables('vNetName'))).subnets[2].id]"
        },
        "privateLinkServiceConnections": [
          {
            "name": "[format('{0}-private-link', variables('sqlServerUniqueName'))]",
            "properties": {
              "privateLinkServiceId": "[resourceId('Microsoft.Sql/servers', variables('sqlServerUniqueName'))]",
              "groupIds": [
                "sqlServer"
              ]
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Sql/servers', variables('sqlServerUniqueName'))]",
        "[resourceId('Microsoft.Network/virtualNetworks', variables('vNetName'))]"
      ]
    },
    {
      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
      "apiVersion": "2020-08-01",
      "name": "[format('{0}/private-link', format('{0}-private-link', variables('sqlServerUniqueName')))]",
      "properties": {
        "privateDnsZoneConfigs": [
          {
            "name": "[variables('sqlServerUniqueName')]",
            "properties": {
              "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', variables('plSqlDnsZone'))]"
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/privateDnsZones', variables('plSqlDnsZone'))]",
        "[resourceId('Microsoft.Sql/servers', variables('sqlServerUniqueName'))]",
        "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-private-link', variables('sqlServerUniqueName')))]"
      ]
    },
    {
      "type": "Microsoft.Sql/servers/administrators",
      "apiVersion": "2020-08-01-preview",
      "name": "[format('{0}/activeDirectory', variables('sqlServerUniqueName'))]",
      "properties": {
        "administratorType": "ActiveDirectory",
        "login": "[parameters('securityOwnerAADLogin')]",
        "sid": "[parameters('securityOwnerAADId')]",
        "tenantId": "[subscription().tenantId]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Sql/servers', variables('sqlServerUniqueName'))]"
      ]
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2020-04-01-preview",
      "scope": "[format('Microsoft.Storage/storageAccounts/{0}', variables('saDiagUniqueName'))]",
      "name": "[guid(variables('lowerProjectPrefix'), resourceGroup().id, deployment().name)]",
      "properties": {
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
        "principalId": "[reference(resourceId('Microsoft.Sql/servers', variables('sqlServerUniqueName')), '2019-06-01-preview', 'Full').identity.principalId]",
        "principalType": "ServicePrincipal",
        "canDelegate": false,
        "description": "SQL Auditing requires SQL Principal Id to have Blob Contributor role access to target storage account"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('saDiagUniqueName'))]",
        "[resourceId('Microsoft.Sql/servers', variables('sqlServerUniqueName'))]"
      ]
    },
    {
      "type": "Microsoft.Sql/servers/devOpsAuditingSettings",
      "apiVersion": "2020-08-01-preview",
      "name": "[format('{0}/default', variables('sqlServerUniqueName'))]",
      "properties": {
        "isAzureMonitorTargetEnabled": true,
        "state": "Enabled",
        "storageEndpoint": "[reference(resourceId('Microsoft.Storage/storageAccounts', variables('saDiagUniqueName'))).primaryEndpoints.blob]",
        "storageAccountSubscriptionId": "[subscription().subscriptionId]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('saDiagUniqueName'))]",
        "[resourceId('Microsoft.Sql/servers', variables('sqlServerUniqueName'))]",
        "[extensionResourceId(resourceId('Microsoft.Storage/storageAccounts', variables('saDiagUniqueName')), 'Microsoft.Authorization/roleAssignments', guid(variables('lowerProjectPrefix'), resourceGroup().id, deployment().name))]"
      ]
    },
    {
      "type": "Microsoft.Sql/servers/securityAlertPolicies",
      "apiVersion": "2020-11-01-preview",
      "name": "[format('{0}/default', variables('sqlServerUniqueName'))]",
      "properties": {
        "state": "Enabled",
        "disabledAlerts": [],
        "emailAddresses": [
          "[parameters('securityAlertEmail')]"
        ],
        "emailAccountAdmins": "[parameters('securityEmailAdmins')]",
        "retentionDays": "[parameters('logRetentionInDays')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Sql/servers', variables('sqlServerUniqueName'))]",
        "[resourceId('Microsoft.Sql/servers/devOpsAuditingSettings', split(format('{0}/default', variables('sqlServerUniqueName')), '/')[0], split(format('{0}/default', variables('sqlServerUniqueName')), '/')[1])]"
      ]
    },
    {
      "type": "Microsoft.Sql/servers/vulnerabilityAssessments",
      "apiVersion": "2020-08-01-preview",
      "name": "[format('{0}/default', variables('sqlServerUniqueName'))]",
      "properties": {
        "storageContainerPath": "[format('{0}vulnerability-assessment', reference(resourceId('Microsoft.Storage/storageAccounts', variables('saDiagUniqueName'))).primaryEndpoints.blob)]",
        "recurringScans": {
          "isEnabled": true,
          "emailSubscriptionAdmins": "[parameters('securityEmailAdmins')]",
          "emails": [
            "[parameters('securityAlertEmail')]"
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('saDiagUniqueName'))]",
        "[resourceId('Microsoft.Sql/servers', variables('sqlServerUniqueName'))]",
        "[resourceId('Microsoft.Sql/servers/securityAlertPolicies', split(format('{0}/default', variables('sqlServerUniqueName')), '/')[0], split(format('{0}/default', variables('sqlServerUniqueName')), '/')[1])]"
      ]
    },
    {
      "type": "Microsoft.Sql/servers/auditingSettings",
      "apiVersion": "2020-08-01-preview",
      "name": "[format('{0}/default', variables('sqlServerUniqueName'))]",
      "properties": {
        "isDevopsAuditEnabled": true,
        "retentionDays": "[parameters('logRetentionInDays')]",
        "auditActionsAndGroups": [
          "SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP",
          "FAILED_DATABASE_AUTHENTICATION_GROUP",
          "BATCH_COMPLETED_GROUP"
        ],
        "isStorageSecondaryKeyInUse": false,
        "isAzureMonitorTargetEnabled": true,
        "state": "Enabled",
        "storageEndpoint": "[reference(resourceId('Microsoft.Storage/storageAccounts', variables('saDiagUniqueName'))).primaryEndpoints.blob]",
        "storageAccountSubscriptionId": "[subscription().subscriptionId]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('saDiagUniqueName'))]",
        "[resourceId('Microsoft.Sql/servers', variables('sqlServerUniqueName'))]",
        "[resourceId('Microsoft.Sql/servers/devOpsAuditingSettings', split(format('{0}/default', variables('sqlServerUniqueName')), '/')[0], split(format('{0}/default', variables('sqlServerUniqueName')), '/')[1])]"
      ]
    },
    {
      "type": "Microsoft.Sql/servers/extendedAuditingSettings",
      "apiVersion": "2020-08-01-preview",
      "name": "[format('{0}/default', variables('sqlServerUniqueName'))]",
      "properties": {
        "isDevopsAuditEnabled": true,
        "retentionDays": "[parameters('logRetentionInDays')]",
        "auditActionsAndGroups": [
          "SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP",
          "FAILED_DATABASE_AUTHENTICATION_GROUP",
          "BATCH_COMPLETED_GROUP"
        ],
        "isStorageSecondaryKeyInUse": false,
        "isAzureMonitorTargetEnabled": true,
        "state": "Enabled",
        "storageEndpoint": "[reference(resourceId('Microsoft.Storage/storageAccounts', variables('saDiagUniqueName'))).primaryEndpoints.blob]",
        "storageAccountSubscriptionId": "[subscription().subscriptionId]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('saDiagUniqueName'))]",
        "[resourceId('Microsoft.Sql/servers', variables('sqlServerUniqueName'))]",
        "[resourceId('Microsoft.Sql/servers/auditingSettings', split(format('{0}/default', variables('sqlServerUniqueName')), '/')[0], split(format('{0}/default', variables('sqlServerUniqueName')), '/')[1])]"
      ]
    },
    {
      "type": "Microsoft.Insights/diagnosticSettings",
      "apiVersion": "2017-05-01-preview",
      "scope": "[format('Microsoft.Sql/servers/{0}', variables('sqlServerUniqueName'))]",
      "name": "DiagnosticSettings",
      "properties": {
        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('laUniqueName'))]",
        "logs": [],
        "metrics": [
          {
            "category": "AllMetrics",
            "enabled": true,
            "retentionPolicy": {
              "enabled": true,
              "days": "[parameters('logRetentionInDays')]"
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('laUniqueName'))]",
        "[resourceId('Microsoft.Sql/servers', variables('sqlServerUniqueName'))]"
      ]
    },
    {
      "type": "Microsoft.Sql/servers/databases",
      "apiVersion": "2020-08-01-preview",
      "name": "[format('{0}/{1}', variables('sqlServerUniqueName'), variables('sqlServerDBUniqueName'))]",
      "location": "[parameters('location')]",
      "tags": "[parameters('resourceTags')]",
      "sku": {
        "name": "[parameters('sqlServerDBSkuName')]",
        "tier": "[parameters('sqlServerDBTierName')]"
      },
      "properties": {
        "createMode": "Default",
        "maxSizeBytes": 268435456000,
        "zoneRedundant": false,
        "licenseType": "BasePrice",
        "storageAccountType": "ZRS"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Sql/servers', variables('sqlServerUniqueName'))]"
      ]
    },
    {
      "type": "Microsoft.Insights/diagnosticSettings",
      "apiVersion": "2017-05-01-preview",
      "scope": "[format('Microsoft.Sql/servers/{0}/databases/{1}', split(format('{0}/{1}', variables('sqlServerUniqueName'), variables('sqlServerDBUniqueName')), '/')[0], split(format('{0}/{1}', variables('sqlServerUniqueName'), variables('sqlServerDBUniqueName')), '/')[1])]",
      "name": "DiagnosticSettings",
      "properties": {
        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('laUniqueName'))]",
        "logs": [
          {
            "category": "SQLInsights",
            "enabled": true,
            "retentionPolicy": {
              "enabled": true,
              "days": "[parameters('logRetentionInDays')]"
            }
          },
          {
            "category": "AutomaticTuning",
            "enabled": true,
            "retentionPolicy": {
              "enabled": true,
              "days": "[parameters('logRetentionInDays')]"
            }
          },
          {
            "category": "QueryStoreRuntimeStatistics",
            "enabled": true,
            "retentionPolicy": {
              "enabled": true,
              "days": "[parameters('logRetentionInDays')]"
            }
          },
          {
            "category": "QueryStoreWaitStatistics",
            "enabled": true,
            "retentionPolicy": {
              "enabled": true,
              "days": "[parameters('logRetentionInDays')]"
            }
          },
          {
            "category": "Errors",
            "enabled": true,
            "retentionPolicy": {
              "enabled": true,
              "days": "[parameters('logRetentionInDays')]"
            }
          },
          {
            "category": "DatabaseWaitStatistics",
            "enabled": true,
            "retentionPolicy": {
              "enabled": true,
              "days": "[parameters('logRetentionInDays')]"
            }
          },
          {
            "category": "Timeouts",
            "enabled": true,
            "retentionPolicy": {
              "enabled": true,
              "days": "[parameters('logRetentionInDays')]"
            }
          },
          {
            "category": "Blocks",
            "enabled": true,
            "retentionPolicy": {
              "enabled": true,
              "days": "[parameters('logRetentionInDays')]"
            }
          },
          {
            "category": "Deadlocks",
            "enabled": true,
            "retentionPolicy": {
              "enabled": true,
              "days": "[parameters('logRetentionInDays')]"
            }
          }
        ],
        "metrics": [
          {
            "category": "Basic",
            "enabled": true,
            "retentionPolicy": {
              "enabled": true,
              "days": "[parameters('logRetentionInDays')]"
            }
          },
          {
            "category": "InstanceAndAppAdvanced",
            "enabled": true,
            "retentionPolicy": {
              "enabled": true,
              "days": "[parameters('logRetentionInDays')]"
            }
          },
          {
            "category": "WorkloadManagement",
            "enabled": true,
            "retentionPolicy": {
              "enabled": true,
              "days": "[parameters('logRetentionInDays')]"
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('laUniqueName'))]",
        "[resourceId('Microsoft.Sql/servers/databases', split(format('{0}/{1}', variables('sqlServerUniqueName'), variables('sqlServerDBUniqueName')), '/')[0], split(format('{0}/{1}', variables('sqlServerUniqueName'), variables('sqlServerDBUniqueName')), '/')[1])]"
      ]
    },
    {
      "type": "Microsoft.Sql/servers/databases/backupShortTermRetentionPolicies",
      "apiVersion": "2020-08-01-preview",
      "name": "[format('{0}/Default', format('{0}/{1}', variables('sqlServerUniqueName'), variables('sqlServerDBUniqueName')))]",
      "properties": {
        "retentionDays": "[if(equals(parameters('sqlServerDBTierName'), 'Premium'), 35, if(equals(parameters('sqlServerDBTierName'), 'Standard'), 35, 7))]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Sql/servers/databases', split(format('{0}/{1}', variables('sqlServerUniqueName'), variables('sqlServerDBUniqueName')), '/')[0], split(format('{0}/{1}', variables('sqlServerUniqueName'), variables('sqlServerDBUniqueName')), '/')[1])]"
      ]
    },
    {
      "type": "Microsoft.Sql/servers/databases/backupLongTermRetentionPolicies",
      "apiVersion": "2020-08-01-preview",
      "name": "[format('{0}/Default', format('{0}/{1}', variables('sqlServerUniqueName'), variables('sqlServerDBUniqueName')))]",
      "properties": {
        "weeklyRetention": "[variables('sqlServerDBWeeklyRetention')]",
        "monthlyRetention": "[variables('sqlServerDBMonthlyRetention')]",
        "yearlyRetention": "[variables('sqlServerDBYearlyRetention')]",
        "weekOfYear": "[variables('sqlServerDBWeekOfYear')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Sql/servers/databases', split(format('{0}/{1}', variables('sqlServerUniqueName'), variables('sqlServerDBUniqueName')), '/')[0], split(format('{0}/{1}', variables('sqlServerUniqueName'), variables('sqlServerDBUniqueName')), '/')[1])]"
      ]
    },
    {
      "type": "Microsoft.Databricks/workspaces",
      "apiVersion": "2018-04-01",
      "name": "[variables('adbUniqueName')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('resourceTags')]",
      "properties": {
        "managedResourceGroupId": "[format('{0}/resourceGroups/databricks-rg-{1}', subscription().id, variables('adbUniqueName'))]",
        "parameters": {
          "customVirtualNetworkId": {
            "value": "[resourceId('Microsoft.Network/virtualNetworks', variables('vNetName'))]"
          },
          "customPublicSubnetName": {
            "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', variables('vNetName'))).subnets[0].name]"
          },
          "customPrivateSubnetName": {
            "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', variables('vNetName'))).subnets[1].name]"
          },
          "enableNoPublicIp": {
            "value": true
          },
          "prepareEncryption": {
            "value": false
          }
        }
      },
      "sku": {
        "name": "premium"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', variables('vNetName'))]"
      ]
    },
    {
      "type": "Microsoft.Insights/diagnosticSettings",
      "apiVersion": "2017-05-01-preview",
      "scope": "[format('Microsoft.Databricks/workspaces/{0}', variables('adbUniqueName'))]",
      "name": "DiagnosticSettings",
      "properties": {
        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('laUniqueName'))]",
        "logs": [
          {
            "category": "dbfs",
            "enabled": true,
            "retentionPolicy": {
              "enabled": true,
              "days": "[parameters('logRetentionInDays')]"
            }
          },
          {
            "category": "clusters",
            "enabled": true,
            "retentionPolicy": {
              "enabled": true,
              "days": "[parameters('logRetentionInDays')]"
            }
          },
          {
            "category": "accounts",
            "enabled": true,
            "retentionPolicy": {
              "enabled": true,
              "days": "[parameters('logRetentionInDays')]"
            }
          },
          {
            "category": "jobs",
            "enabled": true,
            "retentionPolicy": {
              "enabled": true,
              "days": "[parameters('logRetentionInDays')]"
            }
          },
          {
            "category": "notebook",
            "enabled": true,
            "retentionPolicy": {
              "enabled": true,
              "days": "[parameters('logRetentionInDays')]"
            }
          },
          {
            "category": "ssh",
            "enabled": true,
            "retentionPolicy": {
              "enabled": true,
              "days": "[parameters('logRetentionInDays')]"
            }
          },
          {
            "category": "workspace",
            "enabled": true,
            "retentionPolicy": {
              "enabled": true,
              "days": "[parameters('logRetentionInDays')]"
            }
          },
          {
            "category": "secrets",
            "enabled": true,
            "retentionPolicy": {
              "enabled": true,
              "days": "[parameters('logRetentionInDays')]"
            }
          },
          {
            "category": "sqlPermissions",
            "enabled": true,
            "retentionPolicy": {
              "enabled": true,
              "days": "[parameters('logRetentionInDays')]"
            }
          },
          {
            "category": "instancePools",
            "enabled": true,
            "retentionPolicy": {
              "enabled": true,
              "days": "[parameters('logRetentionInDays')]"
            }
          }
        ],
        "metrics": []
      },
      "dependsOn": [
        "[resourceId('Microsoft.Databricks/workspaces', variables('adbUniqueName'))]",
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('laUniqueName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "name": "deployNSGFlowLogs",
      "resourceGroup": "NetworkWatcherRG",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('resourceTags')]"
          },
          "storageId": {
            "value": "[resourceId('Microsoft.Storage/storageAccounts', variables('saDiagUniqueName'))]"
          },
          "workspaceId": {
            "value": "[reference(resourceId('Microsoft.OperationalInsights/workspaces', variables('laUniqueName'))).customerId]"
          },
          "workspaceRegion": {
            "value": "[reference(resourceId('Microsoft.OperationalInsights/workspaces', variables('laUniqueName')), '2020-10-01', 'full').location]"
          },
          "workspaceResourceId": {
            "value": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('laUniqueName'))]"
          },
          "retentionInDays": {
            "value": "[variables('vNetNsgFlowLogRetentionInDays')]"
          },
          "nsgControlPlaneId": {
            "value": "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-adaw-nsg-control-plane', variables('lowerProjectPrefix')))]"
          },
          "nsgControlPlaneName": {
            "value": "[format('{0}-adaw-nsg-control-plane', variables('lowerProjectPrefix'))]"
          },
          "nsgDataPlaneId": {
            "value": "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-adaw-nsg-data-plane', variables('lowerProjectPrefix')))]"
          },
          "nsgDataPlaneName": {
            "value": "[format('{0}-adaw-nsg-data-plane', variables('lowerProjectPrefix'))]"
          },
          "nsgPrivateLinkId": {
            "value": "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-adaw-nsg-private-link', variables('lowerProjectPrefix')))]"
          },
          "nsgPrivateLinkName": {
            "value": "[format('{0}-adaw-nsg-private-link', variables('lowerProjectPrefix'))]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.451.19169",
              "templateHash": "13061650851824984307"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "storageId": {
              "type": "string"
            },
            "workspaceId": {
              "type": "string"
            },
            "workspaceRegion": {
              "type": "string"
            },
            "workspaceResourceId": {
              "type": "string"
            },
            "retentionInDays": {
              "type": "int"
            },
            "nsgControlPlaneId": {
              "type": "string"
            },
            "nsgControlPlaneName": {
              "type": "string"
            },
            "nsgDataPlaneId": {
              "type": "string"
            },
            "nsgDataPlaneName": {
              "type": "string"
            },
            "nsgPrivateLinkId": {
              "type": "string"
            },
            "nsgPrivateLinkName": {
              "type": "string"
            }
          },
          "functions": [],
          "resources": [
            {
              "type": "Microsoft.Network/networkWatchers/flowLogs",
              "apiVersion": "2020-08-01",
              "name": "[format('NetworkWatcher_{0}/{1}', parameters('location'), parameters('nsgControlPlaneName'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "targetResourceId": "[parameters('nsgControlPlaneId')]",
                "storageId": "[parameters('storageId')]",
                "enabled": true,
                "retentionPolicy": {
                  "days": "[parameters('retentionInDays')]",
                  "enabled": true
                },
                "format": {
                  "type": "JSON",
                  "version": 2
                },
                "flowAnalyticsConfiguration": {
                  "networkWatcherFlowAnalyticsConfiguration": {
                    "enabled": true,
                    "workspaceId": "[parameters('workspaceId')]",
                    "workspaceRegion": "[parameters('workspaceRegion')]",
                    "workspaceResourceId": "[parameters('workspaceResourceId')]"
                  }
                }
              }
            },
            {
              "type": "Microsoft.Network/networkWatchers/flowLogs",
              "apiVersion": "2020-08-01",
              "name": "[format('NetworkWatcher_{0}/{1}', parameters('location'), parameters('nsgDataPlaneName'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "targetResourceId": "[parameters('nsgDataPlaneId')]",
                "storageId": "[parameters('storageId')]",
                "enabled": true,
                "retentionPolicy": {
                  "days": "[parameters('retentionInDays')]",
                  "enabled": true
                },
                "format": {
                  "type": "JSON",
                  "version": 2
                },
                "flowAnalyticsConfiguration": {
                  "networkWatcherFlowAnalyticsConfiguration": {
                    "enabled": true,
                    "workspaceId": "[parameters('workspaceId')]",
                    "workspaceRegion": "[parameters('workspaceRegion')]",
                    "workspaceResourceId": "[parameters('workspaceResourceId')]"
                  }
                }
              }
            },
            {
              "type": "Microsoft.Network/networkWatchers/flowLogs",
              "apiVersion": "2020-08-01",
              "name": "[format('NetworkWatcher_{0}/{1}', parameters('location'), parameters('nsgPrivateLinkName'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "targetResourceId": "[parameters('nsgPrivateLinkId')]",
                "storageId": "[parameters('storageId')]",
                "enabled": true,
                "retentionPolicy": {
                  "days": "[parameters('retentionInDays')]",
                  "enabled": true
                },
                "format": {
                  "type": "JSON",
                  "version": 2
                },
                "flowAnalyticsConfiguration": {
                  "networkWatcherFlowAnalyticsConfiguration": {
                    "enabled": true,
                    "workspaceId": "[parameters('workspaceId')]",
                    "workspaceRegion": "[parameters('workspaceRegion')]",
                    "workspaceResourceId": "[parameters('workspaceResourceId')]"
                  }
                }
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('laUniqueName'))]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-adaw-nsg-control-plane', variables('lowerProjectPrefix')))]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-adaw-nsg-data-plane', variables('lowerProjectPrefix')))]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-adaw-nsg-private-link', variables('lowerProjectPrefix')))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('saDiagUniqueName'))]"
      ]
    }
  ]
}